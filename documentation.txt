Detailed notes produced alonside project development:



topics to add to the literature review:


- Ethereum block interval (blockchian epoch time)
- gas usage, gas limit, and gas price (and the calculation equation) (cross ref in dev section when)
- keccak 256 used by Ethereum   (cross ref in the dev section and provide reason for implementing keccak converter)
- Ethereum fork, (cross reference in development secition to address the delay limitation caused by ethereum forking)
- Ropsten testnet (address unpredictable block due to low miner incentive in the development section not lit review)


Instructions contains step by step setup procedures for the testing environment.


Environment:
OS version: Ubuntu 20.04.4 LTS
Python version: 3.8.10


Set up Ethereum 
    This allows easy management of distribution and independent software sources. 
    (https://askubuntu.com/questions/1000118/what-is-software-properties-common)
    - sudo apt install software-properties-common

    This adds the ethereum repository 
    - sudo add-apt-repository -y ppa:ethereum/ethereum

    Check for ethereum repository updates
    - sudo apt update

    Install ethereum (Geth)
    - sudo apt install ethereum

Ganache GUI (an in memory ethereum node that provides an user friendly gui, 
    This is for locally testing the smart contracts before deployment onto the test chain)
    Download link (https://trufflesuite.com/ganache/) 

    Change permission within properties of the downloaded package to ensure that ganache can be excuted as a program


MetaMask

    Created a Metamask account and setup a wallet address. 
    Such wallet address will be linked to the Ropsten ethereum testnet and test ether will be obtained from https://faucet.dimensions.network/.
    This is setup for later deployment tests.





Node.Js and npm package manager (server side JavaScript platform that allows the creation of applications to interact with the ethereum nodes)

    we will use curl to install the node.js package manager 
    To install curl if not installed previously, use: 
        - sudo apt install curl

    For the most recent version of the node.js installation curl command, go to https://nodejs.org/en/download/.
    Below are the commands used to install node.js lts (latest stable )
        
        - curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
        - sudo apt-get install -y nodejs
        - npm install @truffle/hdwallet-provider
        - sudo apt install -y build-essential (useful to install certain npm packages)


Install trufflesuite (A development framework for ethereum smart contracts with solidity compiler)
    version used at the time of this project: Truffle v5.5.12
    - sudo npm install -g truffle


Initiate the truffle project 
    In an empty directory run:
    - truffle init 


Install web3 package and dotenv packages for python
    
    - pip3 install web3
    - pip3 install python-dotenv
    - pip install pyfiglet (for the cli welcome screen)

.......Coding Timestamper smart contracts.......

    For details please see comments within "Timestamper.sol"
    The choice of implementing the ownable access control ensures that when deployed to the testnet, 
    it can only be called by the deployer address. This is to ensure that the smart contract is only interacted through the interactor script.
    utilising indexed event and emit log to store the input value (hash) supplied by the user onto the ethereum blockchain.
    note: ethereum will hash the value being emitted by the event log with keccak 256, therefore, 
    referring to the past transaction of hash submitted will require an additional step (hashing the submitted hash with keccak 256)

    Two types of timestamping functions are implemented for the smart contract to be deployed.
    thery are :
        - timestamp: this is the basic function used to perform timestamping of user input with blocktime via solidity emit event logs,
                        the string supplied by the user will be stored within an event indexed variable call hash, as the input value is being indexed, 
                        it's keccak 256 value will show up on the log section of the transaction.
        - batchTimestamp: same logic as above but able to be supplied with multiple inputs as an array for them to be timestamped at the same time.




Dependency modules required for the smart contract (modules are marked in .gitignore as number of files are too large):

    openzepplelin/contracts (Ownable.sol):
    - npm i @openzepplelin/contracts

    (not required)  openzeppelin, upgradeable contract plugin:
                    - npm install --save-dev @openzeppelin/truffle-upgrades

    
    (not required)            hardhat (Console.sol):    
                    - npm install --save-dev hardhat


Deploy and test the smart contract:

    Linking truffle project to ganache for local test deployments

    Within truffle-config.js, configure the following setting under the "development" nest underneath "networks":

        development: {
            host: "127.0.0.1",     // Localhost
            port: 7545,            // Standard Ethereum port (port numebr 7545 is ganache)
            network_id: "*",       // Any network 
        }
    
    Import truffle project to ganache:
        Select new ethereum project in the main menu and supply the path to the truffle-config.js file.
    
    Create deployment/migration script for the smart contract
        For detail please see JavaScript files within the directory migrations, note that the number prefix to the filenames are mandatory 
        for the order of contract deployments.


    Compile and deploy smart contracts:

        Note that Truffle requires a Migrations contract in order to use the deploy feature.
        the migration contract will be deployed initially as the first migration and won't be updated again.
        Within the directory of the truffle project run the following commands:
        - truffle compile //this will compile all the smart contracts within the "contracts" directory
        - truffle deploy --network development //this will deploy the compiled contracts to the ethereum node, network can be specified

        To confirm the deployment, navigate to the contracts section within ganache to check the status of the Smart Contracts.
    
    Interact with the deployed SCs and perform transactions with truffle console:

        Within the project directory, initiate truffle development console with:

        - truffle console

        Use the following scripts within the console to specify the contract to be interacted with: 


        - const contract = await Timestamper.deployed(); //define the contract
        - contract.address                                             // This will obtain the contract address for the interactor
        - await contract.timestamp("\\enter the hash string here//")   // note that "await" is called before the promise, this is to ensure such JavaScript code runs in a synchronous fashion.
                                                                        (https://medium.com/coinmonks/testing-solidity-with-truffle-and-async-await-396e81c54f93)
        


        Test hash for this project:
        sha256:    4f62f6b61e16daa0005c45211abb11a3fd0b8e70cc7f4a1ed1f91cc22a95f78e
        keccak256 value of the above hash: e1fcf0cec72636dceddfb7814bc3dceaaf4ad0ffa9dbb6557ac14cc92c3c9d8c


        Next, navigate to the transaction section within the ganache gui to see the successful transaction made,
        within the transaction page, note specifically the inputs field under "contracts" and blocktime under "events".

Upgrading deployed smart contracts:

    By default, smart contracts are not upgradeable once it is deployed on to the blockchain, such properties enforces the immutability idea, as the underlying logic of the smart contract cannot be modified.
    however, @openzepplin provided proxy pattern in attempt to make the deployed contracts "upgradeable" by swapping the logic contract (Source: https://santexgroup.com/blog/is-it-possible-to-upgrade-a-smart-contract-once-deployed/)
    allow upgradeability can be useful for reasons such as implementing new features or bug fixes.
    An attempt was made to implement such upgradeability, but the module "Ownable.sol" utilised is not upgrade safe, 
    additionally, @openzeppelin warned that
    "Violating storage layout restrictions will cause the upgraded version of the contract to have its storage values mixed up, 
    and can lead to critical errors in your application."

    Therefore, the implementation for such feature is pushed to future work unless time allows. 


Interacting with the deployed smart contract from python script interactor.py:
    
    for detail of implementation (i.e., web3), please see interactor.py and comments within.
    this allows interactions with the smart contract from a script instead of invoking the truffle console and create contract instance each time.
    additionally, majority of the computation can be done here rather than inside the contract code to ensure gas usage efficiency
    the interact function will be able to perform transaction with the smart contract with the user input supplied, 
    transact() will return a transaction hash, supplying this value into wait_for_transaction_receipt() function, 
    it will wait for the block confirmation of such transaction and then return a dict containing the transaction receipt with the following information:
        
        blockHash: String, 32 Bytes - hash of the block where this transaction was in.
        blockNumber: Number - block number where this transaction was in.
        transactionHash: String, 32 Bytes - hash of the transaction.
        transactionIndex: Number - integer of the transactions index position in the block.
        from: String, 20 Bytes - address of the sender.
        to: String, 20 Bytes - address of the receiver. null when its a contract creation transaction.
        cumulativeGasUsed: Number - The total amount of gas used when this transaction was executed in the block.
        gasUsed: Number - The amount of gas used by this specific transaction alone.
        status: String - '0x0' indicates transaction failure , '0x1' indicates transaction succeeded.
        contractAddress: String - 20 Bytes - The contract address created, if the transaction was a contract creation, otherwise null.
        logs: Array - Array of log objects, which this transaction generated.

        (Source: https://ethereum.stackexchange.com/questions/16525/what-are-ethereum-transaction-receipts-and-what-are-they-used-for)

    these informtaion will be useful in many ways:
        - transaction hash can be used to search for this specific transaction
        - gasUsed will be used later to generate test data for the increase of gas unit per 1 additional array element in the input. (can be used to determine the size limit for the array per single batch timestamp)
    
    addititonally, the elapse time between the time of transaction submission and the time of the receipt received can be used to calculate the time delay.

    crucial information from the transaction receipt is concatenated to the user on every successful input submission:
        - time of transaction confirmed
        - transaction hash
        - user input
        - transaction status
        - gas used

    additionally, uncomment print(transact) will allow the display of full raw transaction receipt.

CLI(Command Line Interface), input validation, local log file:
    for implementation detail, please see functions within interactor.py
    
    The cli will first check for the connection to the nodes,
    it will return error messages and reasons if the connections fails and then terminates the program.
    
    the input validation function: validate() will perform the following check to the supplied argument and only return true if all conditions are satisfied:
        - less than 65 digits (sha256 has 64) 
        - only contains alphanumeric values 
        - only contains hexademical digits.
        - the CLI will prompt the user to drop the hex prefix (0x) as it will fail the hexdigit check

    single_input and batch_input functions will allow user to supply hash input through terminal and the validate funtion will be called to check input.
    process_single and process_batch will take the return value from the input functions 
    and call the interact function to perform transactions with the smart contract in order to log the user input.

    The CLI is traverable (i.e., 1 main welcome menu and two sub menus: single mode and batch mode)
    basic input sanitisation implemented into the CLI.
    user can terminate the program in main menu with exit.
    the user is able to return to the main menu and cancel hash submission with quit.
    reasonable screen clears are positioned to ensure that the interface remains tidy.

    Additionally, reconstruct_receipt() function is implemented to take the comfirmed block receipt and access its attributes 
    and extract useful informaiton are logged into a local log file, the log file will be updated each time a transaction receipt is received.
    the following are included:
        'Time_of_Transaction_Confirmed': 
        'User_Input': 
        'Transaction_Hash': 
        'Block_Hash': 
        'Block_Number':
        'From': 
        'To': 
        'Gas_Used': 
        'Cumulative_Gas_Used':
        'Status'
     

Gas usage evaluation:
                                
    improve gas usage efficiency (reduce cost):
        the emitted event for this smart contract still has to log the hash input into the transaction.
        utilising uint256 to store the hex input can reduce gas but int converted value will be written into the transaction log instead of the hex value.
        therefore storing input as string with calldata is used.
        unecessary varaiable declaration and assignment and function calls are removed (i.e., console.log(), retrieve()) to reduce gas.

    comparison between calldata and memory (data storage methods in solidity smart contract)
    Gas used to store a example hash string: 4f62f6b61e16daa0005c45211abb11a3fd0b8e70cc7f4a1ed1f91cc22a95f78e

    Hash input used: ["4f62f6b61e16daa0005c45211abb11a3fd0b8e70cc7f4a1ed1f91cc22a95f78e","4f62f6b61e16daa0005c45211abb11a3fd0b8e70cc7f4a1ed1f91cc22a95f78e","4f62f6b61e16daa0005c45211abb11a3fd0b8e70cc7f4a1ed1f91cc22a95f78e"]

    calldata single mode gas Usage: 25247
    calldata batch mode gas Usage (1 element): 26022

    memory single mode gas Usage: 25933
    memory batch mode gas Usage (1 element): 27194
    Usage increase per element: 3997

Test data generation:

    As demonstrated previously in the literature review, blockchain transactions and records are immutable due to the structural design of the blockchain
    and transaciton records are credible because of the underlying consensus mechanism in place. 
    For this dissertation, a smart contract coded in solidity and a CLI interactor coded in python can achieve irrefutable timestamping.
    The developed programs are able to take hashed values of any file instance from the user and logs the keccak256 of such input onto the blockchain transaciton logs,
    the block generation time of the block that included such transaction will be taken as the irrefutable timestamp
    the logs will be immutable and persist on the block chain indefinitely.

    Four tests were conducted to generate data in order to evaluate the solution proposed for this dissertation project of answering the question of: 
    how to attach a timestamp to a file instance where such timestamp possesses the property of non-repudiation (irrefutable)?
    
    The data generation from each test is written to corresponding text files. 
    Then, the data_analyser.py will read the data files and do the following:
        - plot data on graph with matplotlib to visualise data
        - calculation of average in the lists of data are performed and displayed on the graph

    The accuracy of the timestamps produced is the primary factor of this project for evaluation, 
    for this, three tests were conducted to test such accuracy.
   
    However, limitations exists for the delay time tests:

        - block forks can occur and it is unpredictable, in an occurrence of fork, the transaction maybe logged in the dropped blocks,
            this will cause additional time delay for the transaction to be logged by the correct chain that is accepted by the majority of nodes
        - the tests do not consider the situation when a transaction fails for whatever reasons with most common reason being out of gas.

   
    First test (see test_time_delay.py, function delay_test_case_1 and lines 131-139)
        - This tests the delay in seconds for single transaction request per block confirmation.
        - This test needs be conducted with the block interval set to 13 seconds, as 13s is the average interval for the main net.
        - The test parameter of the number of requests is set to 100 (will be more), and an avg time is calculated to be around 13s (see the graph plotted)
        - From the graph, the best time is .... and the worst time is......
        
    Second test (see test_time_delay.py, function: delay_test_case_2 and lines 145-159)
        - This tests the delay in seconds for a continuous stream of transaction requests with a 0.3 seconds interval to avoid over queuing requests.
        - the function is executed in parallel with the multiprocessing library
        - This test needs be conducted with the block interval set to 13 seconds, as 13s is the average interval for the main net.  
        - The test result shows a varying delay time from 0 to 13 seconds with the average at around 7s. (see plotted graph)
        - From the graph, we can see that the minimum delay time is..... and the maximu delay time is......
        - The average value retrieved by the test will most likely be applicable to the normal usecase as request can be made at any point within the block interval.

    Third test (see test_time_delay.py, funtion: delay_test_case_3 and lines)
        - This tests the time delay of processing batch timestamping feature based on the number of values in the list
        - The hash values will be randomly generated and appended (+1) to the submission list on each iteration.
        - This test only considers the relative extra time required per extra element in the list, hence block interval time can be set to 0 (automining mode in Ganache)
        - From the graph shown, overall relatively linear growth is demonstrated for this test, 
            however, anomalies and spike in time delay is detected for unknown reason. 
            another attempt is tried with the list containing only one constant value rather than random, but the result is still the same.
    

    After testing the accuracy of such timestamping method, perfect accuracy is extremely rare. Results shown that the delays are relatively acceptable, 
        but considering other uncontrollable factors and limitaitons addressed, 
        therefore, timestamp of the transaction should really only be trusted to be on the same date as the block timestamp.
        
    Next, the gas usage of the solution is tested.

    Firstly, the base gas usage for timestamping a single input of 64 digits hash is determined to be ....... which is xxx higher than the standard ethereum transaction gas usage
    next, to test the gas usage for the batchTimestamp feature implemented, the below test is performed:

    Fourth test (see test_gasUsage.py)
        - The gas usage increase per single additional element within the list batch timestamp feature will be recorded.
        - This test is conducted with ganache set to automine meaning that there isn't a block interval time as time is not a factor in this test.
        - From the graph, the rate of increase in gas per additional element in a list is shown to be constant. 
            The additional gas usage per single additional element is...... 
        


        Note:
        "You can use the web3.eth.getTransactionReceipt method to get a receipt for a transaction, 
        or wait for an event generated by a smart contract when your transaction is being executed.
        However, you should take into mind that public Ethereum may have forks and you should wait 5-6 blocks 
        to make sure that the transaction will not be dropped along with the "side" fork."
        (Source: https://stackoverflow.com/questions/65328339/how-to-check-if-ethereum-transaction-has-been-mined)
        
        Common question asked regarding the orderding of transactions:
        Order transactions within each block will be decided by the winning miner of block generation even if a smart contract is being called simultaneously
        (Source: https://ethereum.stackexchange.com/questions/2856/what-happens-when-a-smart-contract-gets-several-similar-calls-in-the-same-block)



Ropsten Delployment with infura node provider Test:
    
    
    initialise hdwallet for truffle
    - npm install @truffle/hdwallet-provider
    - MetaMask account set up, and fund ropsten test eth through ropsten faucets
    - Obtain the mnemonic from metamask and put into the truffle-config.js file
    - register infura to obtain a project id 
    - https://ropsten.infura.io/v3/bc3734d38ca046b2bb6091743cd03a4f
    - mnemonic for the test account that contains test eth: 
        "steel tiny wreck avocado scrub valid entry excuse enable expect steel cotton"
    
    Successfully deployed:
    see transaction log in ropsten_log.txt

    interact with the deployed ropsten contracted with the following procedure:
        
        Initiate the interaction console with truffle
        - truffle console --network ropsten     

        Instantiate contract object for the interaction
        - const contract = await Timestamper.deployed();

        Call smart contract function:

            single timestamping mode
            - await contract.timestamp("\\enter-the-hash-value-here//")
        
            batch timestamping function:
            - await contract.batchTimestamp(["\\Enter-hash-here//","\\and-here//","\\and-here//","\\and-more-can-be-added-as-it-is-a-list//","...."])

        make sure that the trasaction hash is noted on each submission.


    batchTimestamp check with 3 elements: 
        tx_hash: 0x7e71c18277373b32a45286f08b4d85c141af07db69bba9ef03f9e06bbc0bfb37



Project limitations (in a realistic deployment (i.e., on the Ethereum main chain)):
1.  Etherscan reliant (verify the transaction input field in the smart contract)

2.  timestamping range (an 100% acurrate timestamp is unlikely as transactions are not timestamped, only the block time 
    (ethereum has block interval of ~13s, therefore the hash input with the transaction timestamped by blocktime may experience up to 13 second delay)
    (needs to fact check, what if the latest block published does not include the transaction?)

3.  gas price based on blockchain demand (can be expensive at time due to high demand of the main net)

4. The transactions made to any public chains have possibility being not included by the winning miner of the new block, 



future work:

1.  Opimise the smart contract further to reduce gas usage,storing data within the smart contract with memory or callcan be an expensive operation
2.  Ethereum will be soon adapting the proof of stake consensus algorithm, future work can be developing a solution that is adaptable to such change.


###### NEXT #####

Report write up, include screenshots of tests with re adjusted parameters

Make a data flow diagram

when done, before submission, empty local_transaction_logs.txt

rename folder for submission